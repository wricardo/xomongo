// Code generated by generator, DO NOT EDIT.
package example

import (
	"context"
	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
	"time"
)

type UserRepository struct {
	db *mongo.Database
}

func NewUserRepository(db *mongo.Database) *UserRepository {
	return &UserRepository{db: db}
}
func (x *UserRepository) getCollection() *mongo.Collection {
	return x.db.Collection("user")
}
func (x *UserRepository) Insert(ctx context.Context, input *User) error {
	if input.ID.IsZero() {
		input.ID = primitive.NewObjectID()
	}
	if input.CreatedAt.IsZero() {
		input.CreatedAt = time.Now()
	}
	if res, err := x.getCollection().InsertOne(ctx, input); err != nil {
		return err
	} else if res.InsertedID != nil {
		return nil
	}
	return nil
}
func (x *UserRepository) GetPrimitive(ctx context.Context, input primitive.ObjectID) (*User, error) {
	res := User{}
	err := x.getCollection().FindOne(ctx, bson.D{{"_id", input}}).Decode(&res)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, nil
		}
		return nil, nil
	}
	return &res, nil
}
func (x *UserRepository) Get(ctx context.Context, input string) (*User, error) {
	id, err := primitive.ObjectIDFromHex(input)
	if err != nil {
		return nil, err
	}
	return x.GetPrimitive(ctx, id)
}
func (x *UserRepository) ListAll(ctx context.Context) ([]User, error) {
	cur, err := x.getCollection().Find(ctx, bson.D{})
	if err != nil {
		return nil, err
	}
	res := []User{}
	if err := cur.All(ctx, &res); err != nil {
		return nil, err
	}
	return res, nil
}
